C     ----------------------------------------------------------------
C     USER ELEMENT SUBROUTINE 
C     FOR LINEAR STATIC ANALYSIS UNDER PLANE STRESS CONDITION
C     ELEMENT: BILINIEAR QAUD ELEMENT
C     SHAPE FUNCITON: BILINIEAR SHAPE FUNCTION
C     BY: MEGHAL SHAH 
C     AT: TU BERGAKADEMIE FREIBERG 
C     ----------------------------------------------------------------
      SUBROUTINE UEL(RHS,AMATRX,SVARS,ENERGY,NDOFEL,NRHS,NSVARS,
     1 PROPS,NPROPS,COORDS,MCRD,NNODE,U,DU,V,A,JTYPE,TIME,DTIME,
     2 KSTEP,KINC,JELEM,PARAMS,NDLOAD,JDLTYP,ADLMAG,PREDEF,NPREDF,
     3 LFLAGS,MLVARX,DDLMAG,MDLOAD,PNEWDT,JPROPS,NJPROP,PERIOD)
C
      INCLUDE 'ABA_PARAM.INC'
C
      DIMENSION RHS(MLVARX,*),AMATRX(NDOFEL,NDOFEL),PROPS(*),
     1 SVARS(*),ENERGY(8),COORDS(MCRD,NNODE),U(NDOFEL),
     2 DU(MLVARX,*),V(NDOFEL),A(NDOFEL),TIME(2),PARAMS(*),
     3 JDLTYP(MDLOAD,*),ADLMAG(MDLOAD,*),DDLMAG(MDLOAD,*),
     4 PREDEF(2,NPREDF,NNODE),LFLAGS(*),JPROPS(*)
	DIMENSION COORDINATES(4,2)
C     DECLARATION OF THE VARIABLES 
	INTEGER :: I,J,IP
	REAL :: CONST_C, E, NU, POINT1, POINT2, DET_J
	DOUBLE PRECISION, DIMENSION(3,3) :: CMATRIX
	DOUBLE PRECISION, DIMENSION(2,4) :: GAUSSPTS
	DOUBLE PRECISION, DIMENSION(2,4) :: DSHAPE
	DOUBLE PRECISION, DIMENSION(2,2) :: JACOBIAN
	DOUBLE PRECISION, DIMENSION(2,2) :: INV_JACOBIAN
	DOUBLE PRECISION, DIMENSION(3,8) :: B_MATRIX
	DOUBLE PRECISION, DIMENSION(2) :: A1
	DOUBLE PRECISION, DIMENSION(2) :: A2
	DOUBLE PRECISION, DIMENSION(2) :: A3
	DOUBLE PRECISION, DIMENSION(2) :: A4
	DOUBLE PRECISION, DIMENSION(8,3) :: B_TRANSPOSE
	DOUBLE PRECISION, DIMENSION(8,3) :: TEMP 
	DOUBLE PRECISION, DIMENSION(3,1) :: STRESS
	DOUBLE PRECISION, DIMENSION(3,1) :: STRAIN
C     PRINTING ALL DATA
	WRITE(6,*) '######################'
	WRITE(6,*) 'NODFEL', NDOFEL
	WRITE(6,*) 'MCRD', MCRD
	WRITE(6,*) 'NNODE', NNODE
	WRITE(6,*) '######################'
C     INITIALIZATION OF MATRICES 
	DO I = 1,MLVARX
		RHS(I,1) = 0.0
	END DO 
	DO I = 1, NDOFEL
		DO J = 1, NDOFEL
			AMATRX(I,J) = 0.0
		END DO 
        END DO 
C     FOR PLANE STRESS LINEAR STATIC ANALYSIS
      E = PROPS(1)
	NU = PROPS(2)
	WRITE(6,*) 'E =', E 
	WRITE(6,*) 'NU =', NU
	CONST_C = E/((1+NU)*(1-2*NU))
	CMATRIX(1,1) = 1.0 - NU
	CMATRIX(1,2) = NU 
	CMATRIX(1,3) = 0.0
	CMATRIX(2,1) = NU
	CMATRIX(2,2) = 1.0 - NU 
	CMATRIX(2,3) = 0.0 
	CMATRIX(3,1) = 0.0 
	CMATRIX(3,2) = 0.0
	CMATRIX(3,3) = 0.5 - NU 
	CMATRIX = CMATRIX*CONST_C
	WRITE(6,*) 'CMATRIX'
	WRITE(6,*) CMATRIX
C     COORDINATES (TRANSPOSE OF THE COORDS)
	COORDINATES(1,1) = COORDS(1,1)
	COORDINATES(1,2) = COORDS(2,1)
      COORDINATES(2,1) = COORDS(1,2)
      COORDINATES(2,2) = COORDS(2,2)
      COORDINATES(3,1) = COORDS(1,3)
      COORDINATES(3,2) = COORDS(2,3)
      COORDINATES(4,1) = COORDS(1,4)
      COORDINATES(4,2) = COORDS(2,4)
	WRITE(6,*) 'COORDINATES'
	WRITE(6,*) COORDINATES
C     GAUSS POINTS 
	GAUSSPTS(1,1) = -0.5773
	GAUSSPTS(2,1) = -0.5773
	GAUSSPTS(1,2) = 0.5773
	GAUSSPTS(2,2) = -0.5773
	GAUSSPTS(1,3) = 0.5773
	GAUSSPTS(2,3) = 0.5773
	GAUSSPTS(1,4) = -0.5773
	GAUSSPTS(2,4) = 0.5773 
C     INTEGRATION OVER THE GAUSS POINTS 
	DO IP = 1,4
		POINT1 = GAUSSPTS(1,IP)
		POINT2 = GAUSSPTS(2,IP)
		WRITE(6,*) 'POINT1 =', POINT1
		WRITE(6,*) 'POINT2 =', POINT2
C     DETERMINATION OF THE SHAPE FUNCTIONS 
		DSHAPE(1,1) = -0.25 * (1-POINT2)
          DSHAPE(1,2) = 0.25 * (1-POINT2)
          DSHAPE(1,3) = 0.25 * (1+POINT2)
          DSHAPE(1,4) = -0.25 * (1+POINT2)
          DSHAPE(2,1) = -0.25 * (1-POINT1)
          DSHAPE(2,2) = -0.25 * (1+POINT1)
          DSHAPE(2,3) = 0.25 * (1+POINT1)
          DSHAPE(2,4) = 0.25 * (1-POINT1)
C     FIND OUT JACOBIAN OF THE TRANSFORMATION 
		JACOBIAN = MATMUL(DSHAPE,COORDINATES)
		WRITE(6,*) 'JACOBIAN'
		WRITE(6,*) JACOBIAN
          DET_J = JACOBIAN(1,1)*JACOBIAN(2,2) - 
     1            JACOBIAN(1,2)*JACOBIAN(2,1)
C     INVERSE OF THE JACOBIAN 
		INV_JACOBIAN(1,1) = JACOBIAN(2,2)
		INV_JACOBIAN(2,2) = JACOBIAN(1,1)
		INV_JACOBIAN(1,2) = -JACOBIAN(1,2)
		INV_JACOBIAN(2,1) = -JACOBIAN(2,1)
		INV_JACOBIAN = INV_JACOBIAN / DET_J
C     STRIN - DISPLACEMENT MATRIX
		A1 = MATMUL(INV_JACOBIAN,DSHAPE(:,1))
		A2 = MATMUL(INV_JACOBIAN,DSHAPE(:,2))
		A3 = MATMUL(INV_JACOBIAN,DSHAPE(:,3))
		A4 = MATMUL(INV_JACOBIAN,DSHAPE(:,4))
		B_MATRIX(1,1) = A1(1)
		B_MATRIX(1,2) = 0.0 
		B_MATRIX(1,3) = A2(1)
		B_MATRIX(1,4) = 0.0 
		B_MATRIX(1,5) = A3(1)
		B_MATRIX(1,6) = 0.0
		B_MATRIX(1,7) = A4(1)
		B_MATRIX(1,8) = 0.0
C     
		B_MATRIX(2,1) = 0.0
		B_MATRIX(2,2) = A1(2)
		B_MATRIX(2,3) = 0.0
		B_MATRIX(2,4) = A2(2)
		B_MATRIX(2,5) = 0.0
		B_MATRIX(2,6) = A3(2)
		B_MATRIX(2,7) = 0.0
		B_MATRIX(2,8) = A4(2)
C     
		B_MATRIX(3,1) = A1(2)
		B_MATRIX(3,2) = A1(1)
		B_MATRIX(3,3) = A2(2)
		B_MATRIX(3,4) = A2(1)
		B_MATRIX(3,5) = A3(2)
		B_MATRIX(3,6) = A3(1)
		B_MATRIX(3,7) = A4(2)
		B_MATRIX(3,8) = A4(1)
C     TRANSPOSE OF B-MATRIX
		B_TRANSPOSE = TRANSPOSE(B_MATRIX)
C     STIFNESS MATRIX
		TEMP = MATMUL(B_TRANSPOSE,CMATRIX)
		AMATRX = AMATRX +  (DET_J) * (MATMUL(TEMP,B_MATRIX))
		DO I = 1,8
			DO J = 1,3
				 TEMP(I,J) = 0.0 
			END DO 
		END DO
C     STRAIN AND STRESS FOR THE INCREMENT 
		DO I = 1,3 
			DO J = 1, NDOFEL
				STRAIN(I,1) = B_MATRIX(I,J)*U(J)
			END DO 
		END DO 
		DO I = 1,3 
			DO J = 1, 3
				STRESS(I,1) = CMATRIX(I,J)*STRAIN(J,1)
			END DO 
          END DO 
C     RIGHT HAND SIDE VECTOR 
		DO I = 1,NDOFEL
			DO J = 1,3
				RHS(I,1) = RHS(I,1) - B_TRANSPOSE(I,J)*STRESS(J,1)
			END DO 
		END DO  
		SVARS(1) = STRAIN(1,1)
		SVARS(2) = STRAIN(2,1)
		SVARS(3) = STRAIN(3,1)
		SVARS(4) = STRESS(1,1)
		SVARS(5) = STRESS(2,1)
		SVARS(6) = STRESS(3,1)
		SVARS(7) = PROPS(2)*(STRESS(1,1)+STRESS(2,1))
		WRITE(6,*) '****************SVARS****************'
		DO I = 1,7
			WRITE(6,*) SVARS(I)
		END DO 
		write(6,*) 'DISPLACEMENT @ 1', U(1)
		write(6,*) 'DISPLACEMENT @ 2', U(2)
		write(6,*) 'DISPLACEMENT @ 3', U(3)
		write(6,*) 'DISPLACEMENT @ 4', U(4)
		write(6,*) 'DISPLACEMENT @ 5', U(5)
		write(6,*) 'DISPLACEMENT @ 6', U(6)
		write(6,*) 'DISPLACEMENT @ 7', U(7)
		write(6,*) 'DISPLACEMENT @ 8', U(8)
	END DO
      RETURN
      END